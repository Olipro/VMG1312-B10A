# Makefile.in generated by automake 1.6.2 from Makefile.am.
# zebra/Makefile.  Generated from Makefile.in by configure.

# Copyright 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002
# Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

#BRCM begin
#for debug, add -DBRCM_RIP_DEBUG; command support, add -DDBRCM_CMD_SUPPORT;
#access/filter list support, add -DDBRCM_LIST_SUPPORT
CFLAGS= -s -Os -fomit-frame-pointer -DBRCM_LIST_SUPPORT -L$(LIB_PATH) -I$(BUILD_DIR)/userspace/public/include -I$(BUILD_DIR)/userspace/public/include/linux
CFLAGS += -I$(TOOLCHAIN)/include
CFLAGS += -Werror -Wfatal-errors

ifeq ($(strip $(BUILD_ZEBRA)), static)
CFLAGS += -DBUILD_STATIC
endif

SHELL = /bin/sh

srcdir = .
top_srcdir = ..

prefix = /usr/local
exec_prefix = ${prefix}

bindir = ${exec_prefix}/bin
sbindir = ${exec_prefix}/sbin
libexecdir = ${exec_prefix}/libexec
datadir = ${prefix}/share
sysconfdir = ${prefix}/etc
sharedstatedir = ${prefix}/com
localstatedir = ${prefix}/var
libdir = ${exec_prefix}/lib
infodir = ${prefix}/info
mandir = ${prefix}/man
includedir = ${prefix}/include
oldincludedir = /usr/include
pkgdatadir = $(datadir)/zebra
pkglibdir = $(libdir)/zebra
pkgincludedir = $(includedir)/zebra
top_builddir = ..

ACLOCAL = ${SHELL} /opt/user96345/src/zebra-0.93a/missing --run aclocal-1.6
AUTOCONF = ${SHELL} /opt/user96345/src/zebra-0.93a/missing --run autoconf
AUTOMAKE = ${SHELL} /opt/user96345/src/zebra-0.93a/missing --run automake-1.6
AUTOHEADER = ${SHELL} /opt/user96345/src/zebra-0.93a/missing --run autoheader

am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = /usr/bin/install -c
INSTALL_PROGRAM = ${INSTALL}
INSTALL_DATA = ${INSTALL} -m 644
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_SCRIPT = ${INSTALL}
INSTALL_HEADER = $(INSTALL_DATA)
transform = s,x,x,
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
host_alias = 
host_triplet = i686-pc-linux-gnu

EXEEXT = 
OBJEXT = o
PATH_SEPARATOR = :
AMTAR = ${SHELL} /opt/user96345/src/zebra-0.93a/missing --run tar

#BRCM begin
#AR = ar
#AWK = gawk
BGPD = 
#CC = gcc
#CPP = gcc -E
#CFLAGS= -DBRCM_CMD_SUPPORT -Wl,-allow-shlib-undefined -s -Os -fomit-frame-pointer -L$(LIB_PATH)
#these will be removed since they are on the top /user96345/Makefile
#TOOLCHAIN=/opt/toolchains/uclibc
#CROSS_COMPILE = $(TOOLCHAIN)/bin/mips-uclibc-
#AR              = $(CROSS_COMPILE)ar
#AS              = $(CROSS_COMPILE)as
#LD              = $(CROSS_COMPILE)ld
#CC              = $(CROSS_COMPILE)gcc
#CXX             = $(CROSS_COMPILE)g++
#CPP             = $(CROSS_COMPILE)cpp
#NM              = $(CROSS_COMPILE)nm
#STRIP           = $(CROSS_COMPILE)strip
#OBJCOPY         = $(CROSS_COMPILE)objcopy
#OBJDUMP         = $(CROSS_COMPILE)objdump
#RANLIB          = $(CROSS_COMPILE)ranlib
#LIB_PATH        = $(TOOLCHAIN)/mips-linux/lib
#LIBDIR          = $(TOOLCHAIN)/mips-linux/lib
#LIBCDIR         = $(TOOLCHAIN)/mips-linux
#BRCM end

CURSES = 
DEPDIR = .deps
IF_METHOD = if_netlink.o
IF_PROC = if_proc.o

INCLUDES =  -I.. -I$(top_srcdir) -I$(top_srcdir)/lib
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
IPFORWARD = ipforward_proc.o
KERNEL_METHOD = 
LIBPAM = 

LIB_IPV6 = 
LIB_REGEX = 
MULTIPATH_NUM = 1
OSPF6D = 
OSPFD = 
OTHER_METHOD = 
PACKAGE = zebra
RANLIB = ranlib
RIPD = ripd
RIPNGD = 
RTREAD_METHOD = rtread_netlink.o
RT_METHOD = rt_netlink.o
#STRIP = 
VERSION = 0.93a
VTYSH = 
ZEBRA = zebra
am__include = include
am__quote = 
install_sh = /opt/user96345/src/zebra-0.93a/install-sh
DEFS = -DHAVE_CONFIG_H -DSYSCONFDIR=\"$(sysconfdir)/\" -DMULTIPATH_NUM=1
INSTALL_SDATA = /usr/bin/install -c -m 600

ipforward = ipforward_proc.o
if_method = if_netlink.o
if_proc = if_proc.o
rt_method = rt_netlink.o
rtread_method = rtread_netlink.o
kernel_method = 
other_method = 

otherobj = $(ipforward) $(if_method) $(if_proc) $(rt_method) \
	$(rtread_method) $(kernel_method) $(other_method)


sbin_PROGRAMS = zebra

zebra_SOURCES = \
	zserv.c main.c interface.c connected.c ioctl.c rib.c redistribute.c \
	debug.c rtadv.c zebra_snmp.c


noinst_HEADERS = \
	connected.h ioctl.h rib.h rt.h zserv.h redistribute.h debug.h rtadv.h \
	interface.h ipforward.h irdp.h


zebra_LDADD = ../lib/libzebra.a $(otherobj) $(LIB_IPV6)

zebra_DEPENDENCIES = $(otherobj)

sysconf_DATA = zebra.conf.sample

EXTRA_DIST = $(sysconf_DATA) if_ioctl.c if_netlink.c if_proc.c if_sysctl.c \
	ipforward_aix.c ipforward_ews.c ipforward_proc.c \
	ipforward_solaris.c ipforward_sysctl.c rt_ioctl.c rt_netlink.c \
	rt_socket.c rtread_netlink.c rtread_proc.c rtread_sysctl.c \
	rtread_getmsg.c kernel_socket.c kernel_netlink.c mtu_kvm.c \
	GNOME-SMI GNOME-PRODUCT-ZEBRA-MIB irdp.c

subdir = zebra
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
#sbin_PROGRAMS = zebra$(EXEEXT)
PROGRAMS = $(sbin_PROGRAMS)
am_zebra_OBJECTS = zserv.$(OBJEXT) main.$(OBJEXT) interface.$(OBJEXT) \
	connected.$(OBJEXT) ioctl.$(OBJEXT) rib.$(OBJEXT) \
	redistribute.$(OBJEXT) debug.$(OBJEXT) rtadv.$(OBJEXT) \
	zebra_snmp.$(OBJEXT)

zebra_OBJECTS = $(am_zebra_OBJECTS)
zebra_LDFLAGS =
DEFAULT_INCLUDES =  -I. -I$(srcdir) -I$(top_builddir)
CPPFLAGS =
#BRCM begin 
#LDFLAGS = 
LDFLAGS = -Wl,-warn-common -Wl,-allow-shlib-undefined
#BRCM end
#LIBS = -lm -lcrypt
LIBS = -lm -lcrypt -L$(INSTALL_DIR)/lib/public -lcms_msg $(CMS_COMMON_LIBS)

depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
DEP_FILES = ./$(DEPDIR)/connected.Po ./$(DEPDIR)/debug.Po \
	./$(DEPDIR)/interface.Po ./$(DEPDIR)/ioctl.Po \
	./$(DEPDIR)/main.Po ./$(DEPDIR)/redistribute.Po \
	./$(DEPDIR)/rib.Po ./$(DEPDIR)/rtadv.Po \
	./$(DEPDIR)/zebra_snmp.Po ./$(DEPDIR)/zserv.Po
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@

#BRCM begin
#CFLAGS = -g -O2 -Wall 
#BRCM end

DIST_SOURCES = $(zebra_SOURCES)
DATA = $(sysconf_DATA)

HEADERS = $(noinst_HEADERS)

DIST_COMMON = $(noinst_HEADERS) ChangeLog Makefile.am Makefile.in
SOURCES = $(zebra_SOURCES)

#BRCM begin
#all: all-am
#BRCM end
#all: Makefile $(sbin_PROGRAMS) $(HEADERS)

all install: $(sbin_PROGRAMS)
	install -m 755 $(sbin_PROGRAMS) $(INSTALL_DIR)/bin
	$(STRIP) $(INSTALL_DIR)/bin/$(sbin_PROGRAMS)


.SUFFIXES:
.SUFFIXES: .c .o .obj
#BRCM begin 
#$(srcdir)/Makefile.in:  Makefile.am  $(top_srcdir)/configure.in $(ACLOCAL_M4)
#	cd $(top_srcdir) && \
#	  $(AUTOMAKE) --foreign  zebra/Makefile
#Makefile:  $(srcdir)/Makefile.in  $(top_builddir)/config.status
#	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)
#
sbinPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
install-sbinPROGRAMS: $(sbin_PROGRAMS)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(sbindir)
	@list='$(sbin_PROGRAMS)'; for p in $$list; do \
	  p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  if test -f $$p \
	  ; then \
	    p1=`echo "$$p1" | sed -e 's,^.*/,,'`; \
	    f=`echo $$p1|sed '$(transform);s/$$/$(EXEEXT)/'`; \
	   echo " $(INSTALL_PROGRAM_ENV) $(sbinPROGRAMS_INSTALL) $$p $(DESTDIR)$(sbindir)/$$f"; \
	   $(INSTALL_PROGRAM_ENV) $(sbinPROGRAMS_INSTALL) $$p $(DESTDIR)$(sbindir)/$$f; \
	  else :; fi; \
	done

uninstall-sbinPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(sbin_PROGRAMS)'; for p in $$list; do \
	  f=`echo $$p|sed 's/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  f=`echo "$$f" | sed -e 's,^.*/,,'`; \
	  echo " rm -f $(DESTDIR)$(sbindir)/$$f"; \
	  rm -f $(DESTDIR)$(sbindir)/$$f; \
	done

#BRCM begin
#clean-sbinPROGRAMS:
#BRCM end
clean: mostlyclean-compile
	-test -z "$(sbin_PROGRAMS)" || rm -f $(sbin_PROGRAMS)
	rm -f $(sbin_PROGRAMS).a

#BRCM begin
#zebra$(EXEEXT): $(zebra_OBJECTS) $(zebra_DEPENDENCIES) 
#	@rm -f zebra$(EXEEXT)
#	$(LINK) $(zebra_LDFLAGS) $(zebra_OBJECTS) $(zebra_LDADD) $(LIBS)
$(sbin_PROGRAMS): $(zebra_OBJECTS) $(zebra_DEPENDENCIES)
		@rm -f zebra
		$(LINK) $(zebra_LDFLAGS) $(zebra_OBJECTS) $(zebra_LDADD) $(LIBS)
$(sbin_PROGRAMS).a: $(zebra_OBJECTS) $(zebra_DEPENDENCIES) $(zebra_LDADD) $(LIBS)
		@rm -f zebra.a
		$(AR) rcs zebra.a $(zebra_OBJECTS) $(zebra_DEPENDENCIES) $(zebra_LDADD)
#BRCM end

mostlyclean-compile:
	-rm -f *.$(OBJEXT) core *.core

distclean-compile:
	-rm -f *.tab.c

#include ./$(DEPDIR)/connected.Po
#include ./$(DEPDIR)/debug.Po
#include ./$(DEPDIR)/interface.Po
#include ./$(DEPDIR)/ioctl.Po
#include ./$(DEPDIR)/main.Po
#include ./$(DEPDIR)/redistribute.Po
#include ./$(DEPDIR)/rib.Po
#include ./$(DEPDIR)/rtadv.Po
#include ./$(DEPDIR)/zebra_snmp.Po
#include ./$(DEPDIR)/zserv.Po

distclean-depend:
	-rm -rf ./$(DEPDIR)

#BRCM begin remove dependencies file
#.c.o:
#	source='$<' object='$@' libtool=no \
#	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `test -f '$<' || echo '$(srcdir)/'`$<
.c.o:
	source='$<' object='$@' libtool=no \
	$(COMPILE) -c `test -f '$<' || echo '$(srcdir)/'`$<

.c.obj:
	source='$<' object='$@' libtool=no \
	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' \
	$(CCDEPMODE) $(depcomp) \
	$(COMPILE) -c `cygpath -w $<`
CCDEPMODE = depmode=gcc3
uninstall-info-am:
sysconfDATA_INSTALL = $(INSTALL_DATA)

uninstall-sysconfDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(sysconf_DATA)'; for p in $$list; do \
	  f="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " rm -f $(DESTDIR)$(sysconfdir)/$$f"; \
	  rm -f $(DESTDIR)$(sysconfdir)/$$f; \
	done

ETAGS = etags
ETAGSFLAGS =

tags: TAGS

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(ETAGS_ARGS)$$tags$$unique" \
	  || $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)

top_distdir = ..
distdir = $(top_distdir)/$(PACKAGE)-$(VERSION)

distdir: $(DISTFILES)
	@list='$(DISTFILES)'; for file in $$list; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkinstalldirs) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am

#BRCM begin
#all-am: Makefile $(PROGRAMS) $(DATA) $(HEADERS)
#BRCM end

installdirs:
	$(mkinstalldirs) $(DESTDIR)$(sbindir) $(DESTDIR)$(sysconfdir)

#BRCM begin
#install: install-am
#BRCM end

install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am
install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-rm -f Makefile $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."

#BRCM begin
#clean: clean-am
#clean-am: clean-generic clean-sbinPROGRAMS mostlyclean-am
#BRCM end

distclean: distclean-am

distclean-am: distclean-compile distclean-depend \
	distclean-generic distclean-tags

dvi: dvi-am

dvi-am:

info: info-am

info-am:

install-data-am:

#BRCM begin-- don't need to instal sysconfig data
#install-exec-am: install-sbinPROGRAMS install-sysconfDATA
install-exec-am: install-sbinPROGRAMS
#BRCM end-- don't need to instal sysconfig data

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am

maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

uninstall-am: uninstall-info-am uninstall-sbinPROGRAMS \
	uninstall-sysconfDATA

.PHONY: GTAGS all all-am check check-am clean clean-generic \
	clean-sbinPROGRAMS distclean distclean-compile distclean-depend \
	distclean-generic distclean-tags distdir dvi dvi-am info \
	info-am install install-am install-data install-data-am \
	install-exec install-exec-am install-info install-info-am \
	install-man install-sbinPROGRAMS install-strip \
	install-sysconfDATA installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-compile mostlyclean-generic tags uninstall \
	uninstall-am uninstall-info-am uninstall-sbinPROGRAMS \
	uninstall-sysconfDATA


#client : client_main.o ../lib/libzebra.a
#	$(CC) -g -o client client_main.o ../lib/libzebra.a $(LIBS) $(LIB_IPV6)

install-sysconfDATA: $(sysconf_DATA)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(sysconfdir)
	@list='$(sysconf_DATA)'; for p in $$list; do \
	  if test -f $(srcdir)/$$p; then \
	    echo " $(INSTALL_SDATA) $(srcdir)/$$p $(DESTDIR)$(sysconfdir)/$$p"; \
	    $(INSTALL_SDATA) $(srcdir)/$$p $(DESTDIR)$(sysconfdir)/$$p; \
	  else if test -f $$p; then \
	    echo " $(INSTALL_SDATA) $$p $(DESTDIR)$(sysconfdir)/$$p"; \
	    $(INSTALL_SDATA) $$p $(DESTDIR)$(sysconfdir)/$$p; \
	  fi; fi; \
	done
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
